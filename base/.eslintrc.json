{
  "env": {
    "es2021": true
  },
  "extends": "prettier",
  "parser": "@typescript-eslint/parser",
  "parserOptions": {
    "ecmaVersion": "latest",
    "sourceType": "module"
  },
  "plugins": [
    "@typescript-eslint",
    "import",
    "prettier",
    "@felipstein"
  ],
  "settings": {
    "import/resolver": {
      "typescript": {}
    }
  },
  "rules": {
    "@typescript-eslint/no-unused-vars": "error",

    // throw prettier errors
    "prettier/prettier": ["error", {
      "singleQuote": true,
      "printWidth": 80
    }],

    // allow empty catch
    "no-empty": ["error", { "allowEmptyCatch": true }],

    // enable unnecessary constructor
    "no-useless-constructor": "off",

    // disallow empty functions, except for constructors, methods and async methods
    "no-empty-function": [
      "error",
      {
        "allow": ["constructors", "methods", "asyncMethods"]
      }
    ],

    // prevent console.log
    "no-console": ["warn", { "allow": ["info", "warn", "error"] }],

    "no-unused-vars": "off",

    "no-shadow": "off",

    "class-methods-use-this": "off",

    "no-underscore-dangle": "off",

    "no-promise-executor-return": "off",

    // disable max-len rule, because prettier rule fix it
    "max-len": "off",

    // disable rule "Missing file extension "tsx" and "ts" for "./App""
    // "import/extensions": [
    //   "error",
    //   "ignorePackages",
    //   {
    //     "ts": "never",
    //     "tsx": "never"
    //   }
    // ],
    "import/extensions": "off",

    // keep imports in order
    "import/order": [
      "error",
      {
        "groups": ["builtin", "external", "internal", "parent", "sibling", "index", "type", "object"],
        "alphabetize": { "order": "asc", "caseInsensitive": true },
        "newlines-between": "always"
      }
    ],

    // enable named exports
    "import/prefer-default-export": "off",

    // prohibits using interfaces without the I prefix
    // Honestly, I don't like it. I only use the I prefix when declaring a strong contract, like a repository.
    // see @felipstein/interface-prefix (below)
    // "@typescript-eslint/naming-convention": [
    //   "error",
    //   {
    //     "selector": "interface",
    //     "format": ["PascalCase"],
    //     "custom": {
    //       "regex": "^I[A-Z]",
    //       "match": true
    //     }
    //   }
    // ],

    "import/no-extraneous-dependencies": "off",

    "import/no-unresolved": "off",

    "@felipstein/interface-prefix": "error"
  }
}
